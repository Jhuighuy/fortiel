! <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< !
!
! ,------.               ,--.  ,--.       ,--.
! |  .---',---. ,--.--.,-'  '-.`--' ,---. |  |
! |  `--,| .-. ||  .--''-.  .-',--.| .-. :|  |
! |  |`  ' '-' '|  |     |  |  |  |\   --.|  |
! `--'    `---' `--'     `--'  `--' `----'`--'
!
! Copyright (C) 2021 Oleg Butakov
!
! Permission is hereby granted, free of charge, to any person
! obtaining a copy of this software and associated documentation
! files (the "Software"), to deal in the Software without
! restriction, including without limitation the rights  to use,
! copy, modify, merge, publish, distribute, sublicense, and/or
! sell copies of the Software, and to permit persons to whom the
! Software is furnished to do so, subject to the following
! conditions:
!
! The above copyright notice and this permission notice shall be
! included in all copies or substantial portions of the Software.
!
! THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
! EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
! OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
! NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
! HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
! WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
! FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
! OTHER DEALINGS IN THE SOFTWARE.
! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> !

!!
#@macro let
#@pattern ^(?P<type>.*)::\s*(?P<name>[a-zA-Z]\w*)$
#@channel '__LET__'
  `type.strip()` :: `name.strip()`
#@end channel
#@pattern ^(?P<type>.*)::\s*(?P<name>[a-zA-Z]\w*)\s*=\s*(?P<init>.+)$
#@channel '__LET__'
  `type.strip()` :: `name.strip()`
#@end channel
`name.strip()` = `init.strip()`
#@end macro

!!
#@macro construct if
#@pattern ^\((?P<condition>.*)\)\s*then$
  if (`condition.strip()`) then
    block
      #@flush '__LET__', ''
#@section else_if
#@pattern ^\((?P<condition>.*)\)\s*then$
    end block
  else if (`condition.strip()`) then
    block
      #@flush '__LET__', ''
#@section once else
#@pattern ^$
    end block
  else
    block
      #@flush '__LET__', ''
#@finally
    end block
  end if
#@end macro

!!
#@macro construct do
#@pattern ^\s*$
  do
    block
      #@flush '__LET__', ''
#@pattern ^(?P<index>[a-zA-Z]\w*)\s*=\s*(?P<bounds>.*)$
  do `index.strip()` = `bounds.strip()`
    block
      #@flush '__LET__', ''
#@pattern ^(?P<type>.*)::\s*(?P<index>[_a-zA-Z]\w*)\s*=\s*(?P<bounds>.*)$
  block
    `type.strip()` :: `index.strip()`
    do `index.strip()` = `bounds.strip()`
      block
        #@flush '__LET__', ''
      end block
#@finally
    end do
  end block
#@end macro

!!
#@macro construct for
#@pattern ^
#@end macro